/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { rangeValue, getCoordinates } from '../utilities';
import { PxbProgressIconComponent } from '../pxb-progress-icon.component';
var PieComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PieComponent, _super);
    function PieComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ring = 10;
        _this.outlined = false;
        _this.rv = rangeValue;
        _this.iconStroke = 2;
        // Ring properties
        _this.centerX = 12;
        _this.centerY = 12;
        // Outer ring
        _this.outerRadiusLarge = 10;
        return _this;
    }
    /**
     * @return {?}
     */
    PieComponent.prototype.getPath = /**
     * @return {?}
     */
    function () {
        return "M 12,12 H 24 A 12,12,0," + (this.rv(this.percent, 0, 100) >= 50 ? 1 : 0) + ",1," + getCoordinates(this.rv(this.percent, 0, 100))['x'] + "," + getCoordinates(this.rv(this.percent, 0, 100))['y'] + "Z";
    };
    /**
     * @return {?}
     */
    PieComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.stroke = Math.max(1, Math.min(10, Math.round(this.ring)));
        this.stroke = this.outlined ? Math.max(this.stroke, 2 * this.iconStroke + 1) : this.stroke;
        this.innerRadiusLarge = 10 - this.iconStroke;
        this.outerRadiusSmall = 10 - this.stroke + this.iconStroke;
        this.innerRadiusSmall = 10 - this.stroke;
        if (this.innerRadiusSmall === 0) {
            this.outerRadiusSmall = 0;
        }
        this.outlineBase = "\n  M " + this.centerX + " " + (this.centerY - this.outerRadiusLarge) + "\n  A " + this.outerRadiusLarge + " " + this.outerRadiusLarge + " 0 1 0 " + this.centerX + " " + (this.centerY + this.outerRadiusLarge) + "\n  A " + this.outerRadiusLarge + " " + this.outerRadiusLarge + " 0 1 0 " + this.centerX + " " + (this.centerY - this.outerRadiusLarge) + "\n  Z\n  M " + this.centerX + " " + (this.centerY - this.innerRadiusLarge) + "\n  A " + this.innerRadiusLarge + " " + this.innerRadiusLarge + " 0 1 1 " + this.centerX + " " + (this.centerY + this.innerRadiusLarge) + "\n  A " + this.innerRadiusLarge + " " + this.innerRadiusLarge + " 0 1 1 " + this.centerX + " " + (this.centerY - this.innerRadiusLarge) + "\n  Z\n  M " + this.centerX + " " + (this.centerY - this.outerRadiusSmall) + "\n  A " + this.outerRadiusSmall + " " + this.outerRadiusSmall + " 0 1 0 " + this.centerX + " " + (this.centerY + this.outerRadiusSmall) + "\n  A " + this.outerRadiusSmall + " " + this.outerRadiusSmall + " 0 1 0 " + this.centerX + " " + (this.centerY - this.outerRadiusSmall) + "\n  Z\n  M " + this.centerX + " " + (this.centerY - this.innerRadiusSmall) + "\n  A " + this.innerRadiusSmall + " " + this.innerRadiusSmall + " 0 1 1 " + this.centerX + " " + (this.centerY + this.innerRadiusSmall) + "\n  A " + this.innerRadiusSmall + " " + this.innerRadiusSmall + " 0 1 1 " + this.centerX + " " + (this.centerY - this.innerRadiusSmall) + "\n  Z\n";
        this.twoToneBase = "\nM " + this.centerX + " " + (this.centerY - this.outerRadiusLarge) + "\nA " + this.outerRadiusLarge + " " + this.outerRadiusLarge + " 0 1 0 " + this.centerX + " " + (this.centerY + this.outerRadiusLarge) + "\nA " + this.outerRadiusLarge + " " + this.outerRadiusLarge + " 0 1 0 " + this.centerX + " " + (this.centerY - this.outerRadiusLarge) + "\nZ\n";
        this.clipPath = "\nM12,2\nA10,10,0,1,0,22,12,\n10,10,0,0,0,12,2\nZ\nm0," + (20 - this.stroke) + " \nA " + (10 - this.stroke) + "," + (10 - this.stroke) + ",0,1,1," + (22 - this.stroke) + ",12,\n" + (10 - this.stroke) + "," + (10 - this.stroke) + ",0,0,1,12," + (22 - this.stroke) + "\nZ\n";
    };
    PieComponent.decorators = [
        { type: Component, args: [{
                    selector: 'pie-progress',
                    template: "\n        <pxb-progress-icon\n            [size]=\"size\"\n            [labelPosition]=\"labelPosition\"\n            [percent]=\"percent\"\n            [showPercentLabel]=\"showPercentLabel\"\n            [labelColor]=\"labelColor\"\n            [labelSize]=\"labelSize\"\n            [color]=\"color\"\n        >\n            <svg\n                [attr.height]=\"size + 'px'\"\n                [attr.width]=\"size + 'px'\"\n                x=\"0px\"\n                y=\"0px\"\n                viewBox=\"0 0 24 24\"\n                style=\"transform: rotate(-.25turn)\"\n            >\n                <clipPath [attr.id]=\"'pxb-donut-clip-' + stroke\">\n                    <path [attr.d]=\"clipPath\" />\n                </clipPath>\n                <path\n                    *ngIf=\"outlined && backgroundColor\"\n                    [attr.d]=\"twoToneBase\"\n                    [attr.clip-path]=\"'url(#pxb-donut-clip-' + stroke + ')'\"\n                    [attr.fill]=\"backgroundColor\"\n                />\n                <path\n                    [attr.clip-path]=\"'url(#pxb-donut-clip-' + stroke + ')'\"\n                    [attr.fill]=\"(!outlined && backgroundColor) || color || 'currentColor'\"\n                    [attr.fill-opacity]=\"outlined || percent >= 100 || (!outlined && backgroundColor) ? '1' : '0.3'\"\n                    [attr.d]=\"outlined ? outlineBase : twoToneBase\"\n                />\n                <path\n                    *ngIf=\"rv(percent, 0, 100) > 0 && rv(percent, 0, 100) < 100\"\n                    [attr.fill]=\"color || 'currentColor'\"\n                    [attr.clip-path]=\"'url(#pxb-donut-clip-' + stroke + ')'\"\n                    [attr.d]=\"getPath()\"\n                />\n\n                <circle\n                    *ngIf=\"rv(percent, 0, 100) === 100 && outlined\"\n                    [attr.clip-path]=\"'url(#pxb-donut-clip-' + stroke + ')'\"\n                    cx=\"12\"\n                    cy=\"12\"\n                    r=\"10\"\n                    [attr.fill]=\"color || 'currentColor'\"\n                ></circle>\n            </svg>\n        </pxb-progress-icon>\n    ",
                    styles: [".pxb-progress-icon{position:relative;justify-content:center;align-items:center;display:inline-block}.pxb-progress-icon-label{text-align:center;z-index:2;display:flex}.pxb-progress-icon-label.center{display:unset;font-weight:900;position:absolute;-webkit-text-fill-color:#424e54;-webkit-text-stroke-color:#fff}.pxb-progress-icon-label.inverted{-webkit-text-fill-color:#fff;-webkit-text-stroke-color:#424e54}"]
                }] }
    ];
    PieComponent.propDecorators = {
        ring: [{ type: Input }],
        outlined: [{ type: Input }]
    };
    return PieComponent;
}(PxbProgressIconComponent));
export { PieComponent };
if (false) {
    /** @type {?} */
    PieComponent.prototype.ring;
    /** @type {?} */
    PieComponent.prototype.outlined;
    /** @type {?} */
    PieComponent.prototype.rv;
    /** @type {?} */
    PieComponent.prototype.outlineBase;
    /** @type {?} */
    PieComponent.prototype.twoToneBase;
    /** @type {?} */
    PieComponent.prototype.clipPath;
    /** @type {?} */
    PieComponent.prototype.iconStroke;
    /** @type {?} */
    PieComponent.prototype.stroke;
    /** @type {?} */
    PieComponent.prototype.centerX;
    /** @type {?} */
    PieComponent.prototype.centerY;
    /** @type {?} */
    PieComponent.prototype.outerRadiusLarge;
    /** @type {?} */
    PieComponent.prototype.innerRadiusLarge;
    /** @type {?} */
    PieComponent.prototype.outerRadiusSmall;
    /** @type {?} */
    PieComponent.prototype.innerRadiusSmall;
}
//# sourceMappingURL=data:application/json;base64,